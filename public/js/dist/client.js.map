{"version":3,"sources":["../src/index.mjs","../../../config.js","client.js"],"names":["url","options","Promise","resolve","reject","request","XMLHttpRequest","keys","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","JSON","parse","blob","Blob","clone","entries","get","n","toLowerCase","has","const","i","open","method","onload","getAllResponseHeaders","replace","m","key","value","push","onerror","withCredentials","credentials","setRequestHeader","send","body","module","exports","PORT","URL","config","require","window","location","href","ancestorOrigins","origin","protocol","host","hostname","port","pathname","search","hash","stringify","then","out","console","log","catch","err","error"],"mappings":";AA4C+B,aA5ChB,SAASA,EAAAA,EAAKC,GAC5BA,OAAAA,EAAUA,GAAW,GACd,IAAIC,QAAAA,SAAUC,EAASC,GACvBC,IAAAA,EAAU,IAAIC,eACdC,EAAO,GACPC,EAAM,GACNC,EAAU,GAEVC,EAAAA,WAAAA,MAAAA,CACLC,GAA8B,IAAzBN,EAAQO,OAAO,IAAI,GACxBC,WAAYR,EAAQQ,WACpBD,OAAQP,EAAQO,OAChBZ,IAAKK,EAAQS,YACbC,KAAAA,WAAYb,OAAAA,QAAQC,QAAQE,EAAQW,eACpCC,KAAAA,WAAYf,OAAAA,QAAQC,QAAQe,KAAKC,MAAMd,EAAQW,gBAC/CI,KAAAA,WAAYlB,OAAAA,QAAQC,QAAQ,IAAIkB,KAAK,CAAChB,EAAQK,aAC9CY,MAAOZ,EACPD,QAAS,CACRF,KAAAA,WAAYA,OAAAA,GACZgB,QAAAA,WAAef,OAAAA,GACfgB,IAAAA,SAAKC,GAAKhB,OAAAA,EAAQgB,EAAEC,gBACpBC,IAAAA,SAAKF,GAAKA,OAAAA,EAAEC,gBAAiBjB,MAmB1BmB,IAAAA,IAAMC,KAfXxB,EAAQyB,KAAK7B,EAAQ8B,QAAU,MAAO/B,GAAAA,GAEtCK,EAAQ2B,OAAAA,WACP3B,EAAQ4B,wBAAwBC,QAAQ,+BAAA,SAAiCC,EAAGC,EAAKC,GAChF9B,EAAK+B,KAAKF,EAAMA,EAAIV,eACpBlB,EAAI8B,KAAK,CAACF,EAAKC,IACf5B,EAAQ2B,GAAO3B,EAAQ2B,GAAU3B,EAAQ2B,GAAAA,IAAQC,EAAUA,IAE5DlC,EAAQO,MAGTL,EAAQkC,QAAUnC,EAElBC,EAAQmC,gBAAuC,WAArBvC,EAAQwC,YAElBxC,EAAQQ,QACvBJ,EAAQqC,iBAAiBb,EAAG5B,EAAQQ,QAAQoB,IAG7CxB,EAAQsC,KAAK1C,EAAQ2C,MAAQ,QAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;AC5C/BC,OAAOC,QAAU,CACbC,KAAM,IACNC,IAAG;;ACwBN,aA1BD,IAAA,EAAA,EAAA,QAAA,YA0BC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxBD,IAAMC,EAASC,QAAQ,mBACyEC,EAAAA,OAAOC,SAAhGC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,gBAAiBC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,KAExF,KACUb,EAAAA,EAAAA,SAAAA,EAAOD,IAAK,CACdjB,OAAQ,OACRtB,QAAS,CACW,eAAA,oBAEpBmC,KAAM1B,KAAK6C,UAAU,CACjBX,SAAU,CACNC,KAAAA,EAAMC,gBAAAA,EAAiBC,OAAAA,EAAQC,SAAAA,EAAUC,KAAAA,EAAMC,SAAAA,EAAUC,KAAAA,EAAMC,SAAAA,EAAUC,OAAAA,EAAQC,KAAAA,OAIxFE,KAAK,SAAAC,GACFC,QAAQC,IAAIF,KAEfG,MAAM,SAAAC,GACHH,QAAQI,MAAMD,KAGxB,MAAOA,GACLH,QAAQC,IAAI","file":"client.js","sourceRoot":"../src","sourcesContent":["export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(JSON.parse(request.responseText)),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n","module.exports = {\n    PORT: 3000,\n    URL: `http://127.0.0.1:3000`\n};","import fetch from 'unfetch';\n\nconst config = require('../../../config');\nconst {href, ancestorOrigins, origin, protocol, host, hostname, port, pathname, search, hash} = window.location;\n\ntry {\n    fetch(config.URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            location: {\n                href, ancestorOrigins, origin, protocol, host, hostname, port, pathname, search, hash\n            }\n        })\n    })\n        .then(out => {\n            console.log(out);\n        })\n        .catch(err => {\n            console.error(err);\n\n        });\n} catch (err) {\n    console.log('error posting to corgi');\n}"]}